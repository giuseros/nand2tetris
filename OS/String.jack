// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array vec;
    field int actual_length;
    field int max_length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength>0){
            let vec = Array.new(maxLength);
        }
        let actual_length  = 0;
        let max_length = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (max_length>0){
            do vec.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return actual_length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return vec[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let vec[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let vec[actual_length] = c;
        let actual_length = actual_length+1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let actual_length = actual_length-1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, n, p, d, c,limit,sign;
        let i = 1;
        let n = 0;
        let p = 1;
        let limit = actual_length;
        let sign = 1;

        if (charAt(0) = 45){
            let sign = -1;
            let limit = limit -1;
        }
        while((i<limit) | (i=limit)){
            let c = vec[actual_length-i];
            if ((c<48) | (c>57)){
                return 0;
            }
            let d = c-48;
            let n = n + (d * p);
            let p = p*10;
            let i = i+1;
        }
        return sign*n;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var Array digits;
        var int i, j, di, pos;
        let actual_length = 0;

        let i = val;
        if (i < 0){
            do appendChar(45);
            let i = Math.abs(i);
        }
        let digits = Array.new(5);

        let j = 0;
        while (i > 0){
            let di = i / 10;
            let digits[j] =  (i - (di*10));
            let j = j+1;
            let i = di;
        }
        let  j= j-1;

        while ((j > 0) | (j=0)){
            do appendChar(digits[j] + 48);
            let j = j -1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
